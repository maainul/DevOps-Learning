pipeline {
    agent any

    tools {
            jdk 'jdk17'
            nodejs 'node13'
    }
    environment{
        SONARQUBE_SERVER = 'SonarQube'
        SCANNER_HOME = tool 'SonarQube Scanner'
        DOCKER_IMAGE='maainul/nodejs-with-test'
        DOCKER_TAG='latest'
    }
    stages {
        stage('Code') {
            steps {
                echo "Cloning the code..."
                git url: "https://github.com/maainul/DevOps-Learning.git", branch: "master"
                echo "Code cloned successfully!"
            }
        }
        stage('Install Dependencies') {
            steps {
                echo "install dependencies..............."
                sh "npm install"
                echo "install dependencies completed.....!"
            }
        }
        stage('Test') {
                sh "npm test"
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    echo "SonarQube Scanner Path: ${SCANNER_HOME}"
                }
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    sh """
                    ${SCANNER_HOME}/bin/sonar-scanner \
                      -Dsonar.projectKey="nodejs-with-test" \
                      -Dsonar.projectName="Nodejs With Test(Backend)" \
                      -Dsonar.projectVersion="1.0" \
                      -Dsonar.sources="." \
                      -Dsonar.exclusions="**/node_modules/**,**/dist/**,**/*.test.js,**/*.spec.js,**/coverage/**,**/logs/**" \
                      -Dsonar.javascript.lcov.reportPaths="coverage/lcov.info" \
                      -Dsonar.host.url="http://34.224.64.171:9000" \
                      -Dsonar.login="sqa_86faab3142f735e98b0814e4bb782cfbdd487fb3"
                    """
                }
            }
        }      
        stage('Build') {
            steps {
                sh 'docker build -t maainul/nodejs-with-test:latest .'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh 'trivy fs . || echo "FS scan completed with vulnerabilities."'
            }
        }
        stage('Push') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: "docker-hub-cred",
                    passwordVariable: "dockerHubPass",
                    usernameVariable: 'dockerHubUser')]) {
                        sh 'docker login -u ${dockerHubUser} -p ${dockerHubPass}'
                        sh 'docker push maainul/nodejs-with-test:latest'
                }
            }
        }
        stage('TRIVY IMAGE SCAN') {
            steps {
                sh """
                trivy image --severity CRITICAL,HIGH maainul/nodejs-with-test:latest || echo "Trivy image scan completed."
                """
            }
        }
        stage('Deploy') {
            steps {
                echo "Stopping and removing existing containers..."
                sh '''
                    # Stop all running containers
                    docker ps -q | xargs -r docker stop
                    # Remove all stopped containers
                    docker ps -aq | xargs -r docker rm
                    docker image prune -f
                '''
                echo "Existing containers stopped and removed."
                echo "Deploying the application..."
                sh 'docker compose up -d'
            }
        }
    }
}
